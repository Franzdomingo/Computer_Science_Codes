# -*- coding: utf-8 -*-
"""Vecina_Buenaobra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LsPzudwUCezzPH8myHQ-08_6QVmhXQ1H
"""

class Undead:
    undead_names = []
    
    def __init__(self, name=None, hp=None):
        if name != None and hp != None:
            self.__hp = hp
            self.__name = "Undead" + name
            
            
        else:
            self.__hp = 100
            self.__name = "Undead"
            self.__isDead = False
    
 
    def isDead(self, dead = None):
        if dead == None:
            return self.__isDead
        else:
            self.__isDead = dead
                
    def getName(self):
        return self.__name
    
    def getHP(self):
        return self.__hp
    
    def setName(self, name):
        self.__name = name
    
    def setHP(self, hp=None, multiplier=None):
        if multiplier == None:
            self.__hp = round(hp,2)
        else:
            self.__hp = round((self.__hp * multiplier),2)

    def Herostate(self, x = "is alive", 
    y= "is dead"):
        
        
        if self.isDead():
            print(self.getName(), "x", self.getType(), x)
        else:
            print(self.getName(), "x", self.getType(), y)

    def attack(self, undead, atkPoints, sklAug):
        if isinstance(undead, Undead):
            if not self.isDead():
                if not undead.isDead():
                    if not isinstance(self, Mummy):
                        damage = round(float(self.getHP() * atkPoints),2)
                    else:
                        damage = round(float((self.getHP() * atkPoints) + (undead.getHP() * .1)),2)
                    print(self.getName(), "x", self.getType(), "now attacks", undead.getName(), "x", undead.getType())
                    
                    if isinstance(undead, Ghost):
                        
                        
                        damage = round((damage * .1),2)

                    undead.setHP(undead.getHP() - damage)
                    print(undead.getName(), "lose", damage, "HP")

                    if undead.getHP() <= 0:
                        undead.setHP(0)
                        undead.isDead(True)
                        undead.status()
                
                else:
                    print("Target", end=" ")
                    undead.status()
            
            else:
                self.status()
                        
        else:
            print("Wrong Undead")
        pause()

    def skill(self, undead, atkPoints, sklAug):
        abilities = {
            Zombie: "ATE",
            Vampire: "BITS",
            Ghost: "HAUNTS",
            Lich: "CASTED A SPELL TO"
        }
        ability = abilities.get(type(self))
        if isinstance(undead, Undead):
            if not self.isDead():
                if not undead.isDead():
                    hp_gain = round(float(undead.getHP() * sklAug),2)
                    damage = hp_gain
                    self.setHP(self.getHP() + hp_gain)
                    print(self.getName(), "x", self.getType(), ability, undead.getName(), "y", undead.getType())
                    print(self.getName(), "gain", hp_gain, "HP")

                    damage = hp_gain * .1 if isinstance(undead, Ghost) else damage

                else:
                    print("Target", end=" ")
                    undead.status()

            else:
                self.status()
                        
        else:
            print("Wrong Undead")
        pause()

    def getStatus(self,a = "Alive",b= "Dead"):
        print(self.getName(), "-", self.getType())
        print("HP: ", self.getHP())
        print("State:", b if self.isDead() else a)
    def status(self, a = "is alive", b = "is dead"):
        if self.isDead():
            print(self.getName(), "a", self.getType(), b)
        else:
            print(self.getName(), "a", self.getType(), a)
    def getType(self):
        types = {
            Zombie: "Zombie", Vampire: "Vampire",Skeleton: "Skeleton",Ghost: "Ghost",Lich: "Lich",Mummy: "Mummy"
        }
        return types.get(type(self))

    def create_name(self):

        types = {
            Zombie: "ZOMBIE",Vampire: "VAMPIRE",Skeleton: "SKELETON",Ghost: "GHOST",Lich: "LICH",Mummy: "MUMMY"
        }
        undead_type = types.get(type(self))
        print("<<<<<<<<<< CREATE", undead_type, ">>>>>>>>>>")
        self.setName(input("Name Undead: "))
        while self.getName() in self.undead_names:
            print("Name already taken!")
            pause()
            print("<<<<<<<<<< CREATE", undead_type, ">>>>>>>>>>")
            self.setName(input("Choose another name: "))
        self.undead_names.append(self.getName())

        print("<<<<<<<<<< CREATE", undead_type, ">>>>>>>>>>")
        print("Name: ", self.getName(), "\nType:", self.getType(),"\nHP:", self.getHP(),"\n")
        self.getAbilities()


class Zombie(Undead):
    
    def __init__(self):
        super().__init__()
        self.create_name()

    def attack(self, undead, atkPoints, sklAug):
        if self.getHP() > 50:
            super().attack(undead, atkPoints, sklAug)
        else:
            print(self.getName(), "-", self.getType(), "can't attack HP is less than 50")
            pause()
        
    def getAbilities(self):
        print("Abilities:")
        print("1. Attack")
        print("- Damage 50% of my HP")
        print("2. Eat")
        print("- HP increase Amount 50% of opponent HP")
    
class Vampire(Undead):

    def __init__(self):
        super().__init__()
        self.setHP(120)
        self.create_name()


    def status(self, b = "is sleeping"):
        super().status(b)

    def getAbilities(self):
        print("Abilities:")
        print("1. Attack")
        print("- Damage equivalent to HP")
        print("2. Bite")
        print("- HP increase Amount 80% of opponent HP")
  
    def getStatus(self, a = "Awake", b = "Sleeping"):
        super().getStatus(a,b)

class Skeleton(Undead):

    def __init__(self):
        super().__init__()
        self.setHP(80)
        self.create_name()

    def getAbilities(self):
        print("Abilities:")
        print("Attack")
        print("Damage 70% of my HP")
  
class Ghost(Undead):

    def __init__(self):
        super().__init__()
        self.setHP(50)
        self.create_name()

    def getAbilities(self):
        print("Abilities:")
        print("1. Attack")
        print("- Damage 20% of its HP.")
        print("2. Haunt")
        print("- HP increase Amount 10% of opponent HP")
        print("Passive")
        print("- Damage receive is only 10%")

    def getStatus(self, a = "Haunting", b = "Perished"):
        super().getStatus(a,b)
    
    def status(self, a= "is haunting" ,b = "is perished"):
        super().status(a,b)

class Lich(Undead):

    def __init__(self):
        super().__init__()
        self.setHP(80)
        self.create_name()

    def getAbilities(self):
        print("Abilities:")
        print("1. Attack")
        print("- Damage 70% of its HP.")
        print("2. Cast Spell")
        print("- HP increase Amt. 10% of opponent HP")

    def getStatus(self, a = "Immortal", b = "Alive but Cannot Attack"):
        super().getStatus(a,b)

    def status(self, a = "is immortal" ,b = "is alive but can't attack"):
        super().status(a,b)

class Mummy(Undead):

    def __init__(self):
        super().__init__()
        self.create_name()


    def skill(self):
        if self.isDead():
            self.setHP(100)
            self.isDead(False)
            print(self.getName(), "has been resurrected!")
        pause()

    def attack(self, undead, atkPoints, sklAug):
        if not isinstance(undead, Mummy):
            super().attack(undead, atkPoints, sklAug)
        else:
            print("Cannot attack the same kind.")
            pause()

    def getAbilities(self):
        print("Abilities:")
        print("1. Attack")
        print("- Damage 50% of my HP + 10% of opponents HP")
        print("2. Tear Out")
        print("- Resurrect")
    
    def getStatus(self, a ="Alive", b = "Need to be Resurrected"):
        super().getStatus(a,b)

    def status(self, b = "is needed to be resurrected"):
        super().status(b) 



def choose_undead():
    while True:

        print("<<<<<<<<<< CHOOSE CHARACTER >>>>>>>>>>")
        print("1. Zombie")
        print("2. Vampire")
        print("3. Skeleton")
        print("4. Ghost")
        print("5. Lich")
        print("6. Mummy")
        print("7. Back to Menu")
        choice = input("Enter no. of undead: ")
    
        if choice.isdigit():
            choice = int(choice)
            if choice == 1:
                print("Hello, We wood like to visit for a Midnight Znack. How does ice cream and brains zound?")
                choose_character(zombie, Zombie())
            elif choice == 2:
                print("Darling,You're already in my Veins")
                choose_character(vampire, Vampire())
            elif choice == 3:
                print("The world dies over and over again, but the skeleton always gets up and walks.")
                choose_character(skeleton, Skeleton())
            elif choice == 4:
                print("Eat, sleep, and be scary")
                choose_character(ghost, Ghost())
            elif choice == 5:
                print("We will sail until every light has been extinguished. ")
                choose_character(lich, Lich())
            elif choice == 6:
                print("Death Is Only The Beginning")
                choose_character(mummy, Mummy())
            elif choice == 7:
                break    
            else:
                print("Oops!!! Choose Again.")
                pause() 
        else:
            print("Oops!!! Choose Again.")
            pause()

def choose_character(char_type, className):
    if len(char_type) >= max_undead:
        print("Maximum number of", char_type[0].getType(), "is reached.")
        pause()

        main_menu()
    else:
        char_type.append(className)
        undead_array.append(className)
        print("\n", char_type[0].getType(), "Created")
        pause()

        main_menu()

def command():
    flag = True
    while flag:
        if sum(map(len, [zombie, vampire, skeleton, ghost, lich, mummy])) > 1:
            while True:

                print(">>>>>>>>>> CHOOSE UNDEAD TYPE TO COMMAND >>>>>>>>>>")
                print("1. Zombie")
                print("2. Vampire")
                print("3. Skeleton")
                print("4. Ghost")
                print("5. Lich")
                print("6. Mummy")
                print("7. Back to Menu")
                choice = input("Enter no. of Undead: ")
                if choice.isdigit():
                    choice = int(choice)
                    if choice == 1:
                        command_undead(zombie, atkPoints = .5,sklAug = .5)
                    elif choice == 2:
                        command_undead(vampire, atkPoints = 1,sklAug = .8)
                    elif choice == 3:
                        command_undead(skeleton, atkPoints = .7,sklAug = 0)
                    elif choice == 4:
                        command_undead(ghost, atkPoints = .2,sklAug = .1)
                    elif choice == 5:
                        command_undead(lich, atkPoints = .7,sklAug = .1)
                    elif choice == 6:
                        command_undead(mummy, atkPoints = .5,sklAug = 0)
                    elif choice == 7:
                        main_menu()
                        break

                    else:
                        print("Oops!!! Choose Again.")
                        pause()
                else:
                    print("Oops!!! Choose Again.")
                    pause()
        else:
            print("Please choose a undead.")
            pause()

            main_menu()


           
def command_undead(char_type, atkPoints, sklAug):
    if len(char_type) > 0:
        flag = True
        while flag:

            print(">>>>>>>>>> SELECT ATTACKER >>>>>>>>>>")
            for char in char_type:
                print(char.getName(), "has", char.getHP(),"HP")
            attacker_name = input("Choose a character by name: ")
            for char in char_type:
                if char.getName() == attacker_name:
                    choose_ability(char, atkPoints, sklAug)
            print("Character not found...")
            pause()
    else:
        print("There are no characters available")
        pause()
        command()


     
def choose_ability(attacker, atkPoints, sklAug):

    while True:

        print(">>>>>>>>>> SELECT ABILITY >>>>>>>>>>")
        attacker.getAbilities()
        ability = input("Choose ability: ")
        if ability.isdigit():
            choice = int(ability)
            if choice == 1:
                ability = "attack"
                target(attacker, ability, atkPoints, sklAug)
                break
            elif choice == 2 and not isinstance(attacker, Mummy):
                ability = "skill"
                target(attacker, ability, atkPoints, sklAug)
                break
            elif choice == 2 and isinstance(attacker, Mummy):
                attacker.skill()
                main_menu()
            else:
                print("Oops!!! Choose Again.")
                pause()
        else:
            print("Oops!!! Choose Again.")
            pause()



def target(character, ability, atkPoints, sklAug):
    sorted_undead_array = sort_array()
    flag = True
    while flag:

        print(">>>>>>>>>> CHOOSE TARGET >>>>>>>>>>")
        for i in range(len(sorted_undead_array)):
            if sorted_undead_array[i].getName() != character.getName():
                print(sorted_undead_array[i].getName(), "x", sorted_undead_array[i].getType(), "has",sorted_undead_array[i].getHP(),"HP")

        target_name = input("Choose a target by name: ")
        while target_name == character.getName():
            print("Can't attack itself.\nChoose again.")
            print("XXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
            target_name = input("Choose a target by name: ")

        for i in range(len(sorted_undead_array)):
            if sorted_undead_array[i].getName() == target_name:
                target = sorted_undead_array[i]
                if ability == "attack":
                    print(" ++++++++ BATTLE OUTCOME ++++++++++ ")
                    character.attack(target, atkPoints, sklAug)

                    main_menu()
                elif ability == "skill":
                    print(" ++++++++ BATTLE OUTCOME ++++++++")
                    character.skill(target, atkPoints, sklAug)

                    main_menu()
        print("Undead not found.")
        pause()


           
def show_undead():
    print(">>>>>>>>>> DISPLAY UNDEAD >>>>>>>>>>")
    sorted_undead_array = sort_array()
    if sum(map(len, [zombie, vampire, skeleton, ghost, lich, mummy])) > 0:
        for undead in sorted_undead_array:
            undead.getStatus()

    else:
        print("No Undead Found")
        pause()



def sort_array():
    sorted_undead_array = sorted(undead_array, key=lambda x: (
    isinstance(x, Mummy),
    isinstance(x, Lich),
    isinstance(x, Ghost),
    isinstance(x, Skeleton),
    isinstance(x, Vampire),
    isinstance(x, Zombie),
    ))
    return sorted_undead_array


def main_menu():
    load = 1
    if load == 0:
        load_delay()
    else:
        load=0;
    while True:

        print("\n<<<<<<<<<< MAIN MENU >>>>>>>>>>")
        print("1. Create Undead– instantiate an undead depending on the user’s choice.\n2. Command Undead– allows you to use the abilities of undead.\n3. Display Undead– displays all the undead objects details.\n4. Exit")
        choice = input("\nChoose a number (1-4)?: ")

        if choice.isdigit():
            choice = int(choice)
            if choice == 1:

                choose_undead()
            elif choice == 2:
                command()
            elif choice == 3:

                show_undead()
            elif choice == 4:
                print("Exiting", end="")
                [print(".", end="", flush=True)for i in range(3)]

                ty = "THANK YOU FOR PLAYING!"
                for x in ty:
                    print(x, end="")

                exit()
            else:
                print("Oops!!! Choose Again.\n")
        else:
            print("Oops!!! Choose Again.\n")


def load_delay():

    print(end="")
    [print(".", end="", flush=True)for i in range(3)]
    print()

def border():
    print("++++++")
def pause():
    border()

def load_game():
    print("      ", end="")
    [print("=", end="", flush=True) for i in range(34)]




max_undead = 6

zombie = []
vampire = []
skeleton = []
ghost = []
lich = []
mummy = []
undead_array = []

load_game()
main_menu()






MuD3